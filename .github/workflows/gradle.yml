# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Debug - List project root
        run: ls -la

      - name: Debug - Find JAR files
        run: find . -name "*.jar"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/libs/*.jar
          if-no-files-found: error

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3.1.0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: List artifact directory
        run: ls -la build/libs

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SCP to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp -i ~/.ssh/id_rsa build/libs/*.jar $EC2_USER@$EC2_HOST:/home/ubuntu

      - name: Set execute permission on jar
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'chmod +x /home/ubuntu/Algoy-AI-0.0.1-SNAPSHOT.jar'

      - name: RUN java app
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |          
          if ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST '[ -f /home/ubuntu/ai-pid ]'; then
            PID=$(ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'cat /home/ubuntu/ai-pid')
            if ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "ps -p $PID > /dev/null"; then
              echo "Algoy-AI PID 파일이 존재하며, 프로세스가 실행 중입니다. 이전 프로세스를 종료합니다."
              ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "kill -9 $PID"
            else
              echo "Algoy-AI PID 파일이 존재하지만 프로세스가 실행 중이지 않습니다. 새로운 프로세스를 시작합니다."
            fi
          else
            echo "Algoy-AI PID 파일이 존재하지 않습니다. 새로운 프로세스를 시작합니다."
          fi
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'nohup java -jar /home/ubuntu/Algoy-AI-0.0.1-SNAPSHOT.jar >/dev/null 2>&1 & echo $! > /home/ubuntu/ai-pid'
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'ps -p $(< /home/ubuntu/ai-pid) && echo "Algoy-AI 프로세스 시작됨" || echo "Algoy-AI 프로세스 시작 실패"'
