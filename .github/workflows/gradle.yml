# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: List build directory
        run: ls -la build/libs

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/libs/*.jar

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3.1.0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: List artifact directory
        run: ls -la

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SCP to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp -i ~/.ssh/id_rsa *.jar $EC2_USER@$EC2_HOST:/home/ubuntu

      - name: Run Java app
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          WEB_IP: ${{ secrets.WEB_IP }}
          MONGODB_URI: mongodb://algoy_admin:0000@43.203.235.252:27017/algoy_ai?authSource=admin
          AI_API_URL: https://kdt-api-function.azurewebsites.net/api/v1/question/sse-streaming
          AI_API_KEY: 9158381d-b009-4891-8982-51a6a8dac707
          ALLEN_API_URL: https://kdt-api-function.azurewebsites.net/api/v1/question?content=
          ALLEN_API_KEY: 32d9ab5a-aeab-4814-81ac-68d7c0bbbb1d
        run: |
          if ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST '[ -f /home/ubuntu/ai-pid ]'; then
            echo "Algoy-AI PID file exists. Terminating previous process."
            ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'kill -9 $(< /home/ubuntu/ai-pid)'
          else
            echo "Algoy-AI PID file does not exist. Starting a new process."
          fi
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "nohup java -jar /home/ubuntu/Algoy-AI-0.0.1-SNAPSHOT.jar \
            --server.port=8082 \
            --ai-frontend.url=$WEB_IP \
            --spring.data.mongodb.uri='$MONGODB_URI' \
            --ai.api.url=$AI_API_URL \
            --ai.api.key=$AI_API_KEY \
            --allenApi.url=$ALLEN_API_URL \
            --allenApi.key=$ALLEN_API_KEY \
            >/dev/null 2>&1 & echo \$! > /home/ubuntu/ai-pid"
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'ps -p $(< /home/ubuntu/ai-pid) && echo "Algoy-AI process started" || echo "Failed to start Algoy-AI process"'
